{"version":3,"sources":["sound/click1.wav","sound/click2.wav","Metronome.js","index.js"],"names":["module","exports","Metronome","props","handleBpmChange","event","bpm","target","value","state","playing","clearInterval","timer","setInterval","playClick","setState","count","startStop","beatsPerMeasure","click2","play","click1","Audio","this","className","type","min","max","onChange","onClick","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,kLCsG5BC,E,kDAhGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAaRC,gBAAkB,SAAAC,GAChB,IAAMC,EAAMD,EAAME,OAAOC,MAErB,EAAKC,MAAMC,SAEbC,cAAc,EAAKC,OACnB,EAAKA,MAAQC,YAAY,EAAKC,UAAY,GAAKR,EAAO,KAGtD,EAAKS,SAAS,CACZC,MAAO,EACPV,SAIF,EAAKS,SAAS,CAAET,SA7BD,EAgCnBW,UAAY,WACN,EAAKR,MAAMC,SAEbC,cAAc,EAAKC,OACnB,EAAKG,SAAS,CACZL,SAAS,MAIX,EAAKE,MAAQC,YACX,EAAKC,UACJ,GAAK,EAAKL,MAAMH,IAAO,KAE1B,EAAKS,SACH,CACEC,MAAO,EACPN,SAAS,GAGX,EAAKI,aAnDQ,EAuDnBA,UAAY,WAAO,IAAD,EACmB,EAAKL,MADxB,EACRO,MADQ,EACDE,kBAGiB,EAC9B,EAAKC,OAAOC,OAEZ,EAAKC,OAAOD,OAId,EAAKL,UAAS,SAAAN,GAAK,MAAK,CACtBO,OAAQP,EAAMO,MAAQ,GAAKP,EAAMS,qBAhEnC,EAAKT,MAAQ,CACXC,SAAS,EACTM,MAAO,EACPV,IAAK,IACLY,gBAAiB,GAGnB,EAAKG,OAAS,IAAIC,MAAMD,KACxB,EAAKF,OAAS,IAAIG,MAAMH,KAXP,E,qDAuET,IAAD,EACkBI,KAAKd,MAAtBC,EADD,EACCA,QAASJ,EADV,EACUA,IAEjB,OACE,yBAAKkB,UAAU,aACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,cACb,6BAAMlB,EAAN,QACA,2BACEmB,KAAK,QACLC,IAAI,KACJC,IAAI,MACJnB,MAAOF,EACPsB,SAAUL,KAAKnB,mBAGnB,4BAAQyB,QAASN,KAAKN,WACnBP,EAAU,OAAS,e,GAzFRoB,aCCxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.b9c14787.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/click1.7a7930a2.wav\";","module.exports = __webpack_public_path__ + \"static/media/click2.fe0ded65.wav\";","import React, { Component } from 'react';\nimport './Metronome.css';\nimport click1 from './sound/click1.wav';\nimport click2 from './sound/click2.wav';\n\nclass Metronome extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      playing: false,\n      count: 0,\n      bpm: 100,\n      beatsPerMeasure: 4\n    }\n\n    this.click1 = new Audio(click1);\n    this.click2 = new Audio(click2)\n  }\n\n  handleBpmChange = event => {\n    const bpm = event.target.value;\n\n    if (this.state.playing) {\n      // Stop the old timer and start a new one\n      clearInterval(this.timer);\n      this.timer = setInterval(this.playClick, (60 / bpm) * 1000);\n\n      // Set the new BPM, and reset the beat counter\n      this.setState({\n        count: 0,\n        bpm\n      });\n    } else {\n      // Otherwise just update the BPM\n      this.setState({ bpm });\n    }\n  };\n  startStop = () => {\n    if (this.state.playing) {\n      // Stop the timer\n      clearInterval(this.timer);\n      this.setState({\n        playing: false\n      });\n    } else {\n      // Start a timer with the current BPM\n      this.timer = setInterval(\n        this.playClick,\n        (60 / this.state.bpm) * 1000\n      );\n      this.setState(\n        {\n          count: 0,\n          playing: true\n          // Play a click \"immediately\" (after setState finishes)\n        },\n        this.playClick\n      );\n    }\n  }\n  playClick = () => {\n    const { count, beatsPerMeasure } = this.state;\n\n    // The first beat will have a different sound than the others\n    if (count % beatsPerMeasure === 0) {\n      this.click2.play();\n    } else {\n      this.click1.play();\n    }\n\n    // Keep track of which beat we're on\n    this.setState(state => ({\n      count: (state.count + 1) % state.beatsPerMeasure\n    }));\n  };\n\n  render() {\n    const { playing, bpm } = this.state;\n\n    return (\n      <div className=\"Metronome\">\n        <div className=\"metronome\">\n          <div className=\"bpm-slider\">\n            <div>{bpm} BPM</div>\n            <input\n              type=\"range\"\n              min=\"60\"\n              max=\"240\"\n              value={bpm}\n              onChange={this.handleBpmChange}\n            />\n          </div>\n          <button onClick={this.startStop}>\n            {playing ? 'Stop' : 'Start'}\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Metronome;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Metronome.css';\nimport Metronome from './Metronome';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Metronome />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}